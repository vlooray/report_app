# -*- coding: utf-8 -*-
"""report_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1reLL26JrdA7SLTVhCj5EvXf7UhYXXRTx
"""

import streamlit as st
import pandas as pd
import datetime
import io
import xlrd
from openpyxl import Workbook

st.set_page_config(page_title="Wavepick Reporting", layout="wide")
st.title("\U0001F4CA Wavepick Reporting App")

uploaded_file = st.file_uploader("Upload file Excel", type=["xlsx", "xls"])

# Load referensi zona dari file lokal
try:
    df_zona = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona")
    df_zona_ps1 = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona PS1")
except Exception as e:
    st.error(f"Gagal load data referensi zona: {e}")
    st.stop()

def convert_xls_to_xlsx(uploaded_file):
    try:
        book = xlrd.open_workbook(file_contents=uploaded_file.read())
        sheet = book.sheet_by_index(0)
        wb = Workbook()
        ws = wb.active
        for row_idx in range(sheet.nrows):
            ws.append(sheet.row_values(row_idx))
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        return output
    except Exception as e:
        st.error("Gagal konversi file .xls. Mohon upload ulang dalam format .xlsx")
        st.stop()

if uploaded_file:
    try:
        if uploaded_file.name.endswith(".xls"):
            xlsx_file = convert_xls_to_xlsx(uploaded_file)
            df_raw = pd.read_excel(xlsx_file, sheet_name=0)
        else:
            df_raw = pd.read_excel(uploaded_file, sheet_name=0)
    except Exception as e:
        st.error(f"Gagal baca sheet dari file user: {e}")
        st.stop()

    df = df_raw.copy()
    df.columns = df.columns.str.strip()

    column_mapping = {
        'Confirm Date': 'Confirm date',
        'Confirm Time': 'Confirm time',
        'Qty': 'Qty',
        'Flag': 'Flag',
        'Wavepick Created': 'Wavepick created',
        'Wavepick No': 'Wavepick',
        'Stype': 'STYPE',
        'Material ID': 'MID',
        'Description': 'Description'
    }
    df = df.rename(columns=column_mapping)

    required_columns = list(column_mapping.values())
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        st.error(f"File yang diupload tidak mengandung kolom berikut: {', '.join(missing_columns)}")
        st.stop()

    df['Confirm date'] = pd.to_datetime(df['Confirm date'], errors='coerce')
    df['Confirm time'] = pd.to_datetime(df['Confirm time'], errors='coerce').dt.time
    df['Wavepick created'] = pd.to_datetime(df['Wavepick created'], errors='coerce')

    # Gabungkan confirm date + time
    df['Confirm datetime'] = pd.to_datetime(df['Confirm date'].astype(str) + ' ' + df['Confirm time'].astype(str), errors='coerce')

    stype_to_zona = df_zona.groupby('STYPE')['ZONA'].first().to_dict()
    df['ZONA'] = df['STYPE'].map(stype_to_zona)
    df = df.merge(df_zona_ps1, on='MID', how='left', suffixes=('', '_ps1'))
    df['ZONA'] = df['ZONA_ps1'].combine_first(df['ZONA'])
    df = df.drop(columns=['ZONA_ps1'])

    zona_map = {
        'ZAA': 'A',
        'ZAB': 'BK',
        'ZAC': 'CJ',
        'ZAL': 'L'
    }
    df['ZONA'] = df['ZONA'].replace(zona_map)
    df['ZONA'] = df['ZONA'].fillna('Unmapped')

    df['TimeStr'] = df['Confirm datetime'].dt.time.astype(str)
    valid_confirm = df[(df['Confirm datetime'].notna()) & (df['TimeStr'] != '00:00:00')].copy()

    wavepick_c = valid_confirm[valid_confirm['Flag'] == 'C']

    # 1. Rekap wavepick dengan flag C + rata-rata durasi
    rekap_wavepick = wavepick_c.groupby('Wavepick').agg(
        First_Confirm=('Confirm datetime', 'min'),
        Last_Confirm=('Confirm datetime', 'max'),
        Total_Qty=('Qty', 'sum'),
        Total_MID=('MID', 'nunique')
    ).reset_index()
    rekap_wavepick['Durasi'] = rekap_wavepick['Last_Confirm'] - rekap_wavepick['First_Confirm']
    rekap_wavepick['Durasi'] = rekap_wavepick['Durasi'].apply(lambda x: str(x).split('.')[0])

    rata2_durasi = pd.to_timedelta(rekap_wavepick['Durasi']).mean()

    st.markdown("## ‚è±Ô∏è Rata-rata Durasi Picking Hari Ini")
    st.markdown(f"### {str(rata2_durasi).split('.')[0]}")

    st.subheader("üì¶ Rekap Wavepick dengan Flag C")
    st.dataframe(rekap_wavepick, use_container_width=True)

    # 2. Rata-rata durasi dan kontribusi zona
    zona_rekap = wavepick_c.groupby(['ZONA', 'Wavepick']).agg(
        First=('Confirm datetime', 'min'),
        Last=('Confirm datetime', 'max'),
        Qty=('Qty', 'sum'),
        MID=('MID', 'nunique')
    ).reset_index()
    zona_rekap['Durasi'] = zona_rekap['Last'] - zona_rekap['First']

    # Cari last confirm zone per wavepick
    last_confirm_per_wavepick = wavepick_c.loc[wavepick_c.groupby('Wavepick')['Confirm datetime'].idxmax()]
    last_confirm_count = last_confirm_per_wavepick['ZONA'].value_counts().reset_index()
    last_confirm_count.columns = ['ZONA', 'Total_Last_Confirm']

    zona_summary = zona_rekap.groupby('ZONA').agg(
        Avg_Durasi=('Durasi', lambda x: str(pd.to_timedelta(x).mean()).split('.')[0]),
        Avg_Qty=('Qty', 'mean')
    ).reset_index()

    zona_summary = zona_summary.merge(last_confirm_count, on='ZONA', how='left').fillna(0)
    zona_summary['Total_Last_Confirm'] = zona_summary['Total_Last_Confirm'].astype(int)

    st.subheader("üè∑Ô∏è Rata-rata Durasi & Kontribusi Zona")
    st.dataframe(zona_summary, use_container_width=True)

    # 3. Operator (STYPE RB1)
    operator_df = wavepick_c[wavepick_c['STYPE'] == 'RB1'].copy()
    first_wavepick_confirm = wavepick_c.groupby('Wavepick')['Confirm datetime'].min().to_dict()
    operator_df['Wavepick_Start'] = operator_df['Wavepick'].map(first_wavepick_confirm)
    operator_df['Durasi'] = operator_df['Confirm datetime'] - operator_df['Wavepick_Start']
    operator_summary = operator_df.groupby('Wavepick').agg(
        Qty=('Qty', 'sum'),
        MID=('MID', 'nunique'),
        Durasi=('Durasi', lambda x: str(x.max()).split('.')[0])
    ).reset_index()

    st.subheader("üë∑ Operator Picking Summary - STYPE RB1")
    st.dataframe(operator_summary, use_container_width=True)

else:
    st.info("Silakan upload file Excel untuk mulai.")