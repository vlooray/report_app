# -*- coding: utf-8 -*-
"""report_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1reLL26JrdA7SLTVhCj5EvXf7UhYXXRTx
"""

import streamlit as st
import pandas as pd
import datetime

st.set_page_config(page_title="Wavepick Reporting", layout="wide")
st.title("\U0001F4CA Wavepick Reporting App")

uploaded_file = st.file_uploader("Upload file Excel", type=["xlsx", "xls"])

# Load referensi zona dari file lokal
try:
    df_zona = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona")
    df_zona_ps1 = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona PS1")
except Exception as e:
    st.error(f"Gagal load data referensi zona: {e}")
    st.stop()

if uploaded_file:
    try:
        if uploaded_file.name.endswith(".xls"):
            df_raw = pd.read_excel(uploaded_file, sheet_name=0, engine="xlrd")
        else:
            df_raw = pd.read_excel(uploaded_file, sheet_name=0)
    except Exception as e:
        st.error(f"Gagal baca sheet dari file user: {e}")
        st.stop()

    df = df_raw.copy()
    df.columns = df.columns.str.strip()

    column_mapping = {
        'Confirm Date': 'Confirm date',
        'Confirm Time': 'Confirm time',
        'Qty': 'Qty',
        'Flag': 'Flag',
        'Wavepick Created': 'Wavepick created',
        'Wavepick No': 'Wavepick',
        'Stype': 'STYPE',
        'Material ID': 'MID',
        'Description': 'Description'
    }
    df = df.rename(columns=column_mapping)

    required_columns = list(column_mapping.values())
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        st.error(f"File yang diupload tidak mengandung kolom berikut: {', '.join(missing_columns)}")
        st.stop()

    df['Confirm date'] = pd.to_datetime(df['Confirm date'], errors='coerce')
    df['Confirm time'] = pd.to_datetime(df['Confirm time'], errors='coerce')
    df['Wavepick created'] = pd.to_datetime(df['Wavepick created'], errors='coerce')

    stype_to_zona = df_zona.groupby('STYPE')['ZONA'].first().to_dict()
    df['ZONA'] = df['STYPE'].map(stype_to_zona)
    df = df.merge(df_zona_ps1, on='MID', how='left', suffixes=('', '_ps1'))
    df['ZONA'] = df['ZONA_ps1'].combine_first(df['ZONA'])
    df = df.drop(columns=['ZONA_ps1'])

    zona_map = {
        'ZAA': 'A',
        'ZAB': 'BK',
        'ZAC': 'CJ',
        'ZAL': 'L'
    }
    df['ZONA'] = df['ZONA'].replace(zona_map)
    df['ZONA'] = df['ZONA'].fillna('Unmapped')

    df['TimeStr'] = df['Confirm time'].dt.time.astype(str)
    valid_confirm = df[(df['Confirm time'].notna()) & (df['TimeStr'] != '00:00:00')].copy()

    # 1. Rata-rata durasi picking per wavepick
    wavepick_c = valid_confirm[valid_confirm['Flag'] == 'C']
    durasi_wavepick = wavepick_c.groupby('Wavepick').agg(
        First_Confirm=('Confirm time', 'min'),
        Last_Confirm=('Confirm time', 'max')
    ).reset_index()
    durasi_wavepick['Duration'] = durasi_wavepick['Last_Confirm'] - durasi_wavepick['First_Confirm']
    durasi_wavepick['Duration'] = durasi_wavepick['Duration'].apply(lambda x: str(x).split('.')[0])
    durasi_wavepick['Tanggal'] = durasi_wavepick['First_Confirm'].dt.date

    st.subheader("‚è≥ Rata-Rata Durasi Picking per Wavepick")
    st.dataframe(durasi_wavepick[['Wavepick', 'Tanggal', 'Duration']], use_container_width=True)

    # 2. Rekap wavepick dengan flag C
    rekap_wavepick = wavepick_c.groupby('Wavepick').agg(
        First_Confirm=('Confirm time', 'min'),
        Last_Confirm=('Confirm time', 'max'),
        Total_Qty=('Qty', 'sum'),
        Total_MID=('MID', 'nunique')
    ).reset_index()
    rekap_wavepick['Durasi'] = rekap_wavepick['Last_Confirm'] - rekap_wavepick['First_Confirm']
    rekap_wavepick['Durasi'] = rekap_wavepick['Durasi'].apply(lambda x: str(x).split('.')[0])

    st.subheader("üì¶ Rekap Wavepick dengan Flag C")
    st.dataframe(rekap_wavepick, use_container_width=True)

    # 3. Rata-rata durasi dan kontribusi zona
    zona_rekap = wavepick_c.groupby(['ZONA', 'Wavepick']).agg(
        First=('Confirm time', 'min'),
        Last=('Confirm time', 'max'),
        Qty=('Qty', 'sum'),
        MID=('MID', 'nunique')
    ).reset_index()
    zona_rekap['Durasi'] = zona_rekap['Last'] - zona_rekap['First']

    zona_summary = zona_rekap.groupby('ZONA').agg(
        Avg_Durasi=('Durasi', lambda x: str(pd.to_timedelta(x).mean()).split('.')[0]),
        Avg_Qty=('Qty', 'mean'),
        Total_Last_Confirm=('Wavepick', 'count')
    ).reset_index()

    st.subheader("üè∑Ô∏è Rata-rata Durasi & Kontribusi Zona")
    st.dataframe(zona_summary, use_container_width=True)

    # 4. Operator (STYPE RB1)
    operator_df = wavepick_c[wavepick_c['STYPE'] == 'RB1'].copy()
    operator_summary = operator_df.groupby('Wavepick').agg(
        First=('Confirm time', 'min'),
        Last=('Confirm time', 'max'),
        Qty=('Qty', 'sum'),
        MID=('MID', 'nunique')
    ).reset_index()
    operator_summary['Durasi'] = operator_summary['Last'] - operator_summary['First']
    operator_summary['Durasi'] = operator_summary['Durasi'].apply(lambda x: str(x).split('.')[0])

    st.subheader("üë∑ Operator Picking Summary - STYPE RB1")
    st.dataframe(operator_summary, use_container_width=True)

else:
    st.info("Silakan upload file Excel untuk mulai.")