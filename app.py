# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FEAWS5v8AAblXHa7VXEhWKkzU_PX5AkV
"""

import streamlit as st
import pandas as pd
import datetime

st.set_page_config(page_title="Wavepick Late Checker", layout="wide")
st.title("\U0001F4E6 Wavepick Late Checker - Zona View")

uploaded_file = st.file_uploader("Upload file Excel", type=["xlsx", "xls"])

# Load referensi zona dari file lokal (file internal dev)
try:
    df_zona = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona")
    df_zona_ps1 = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona PS1")
except Exception as e:
    st.error(f"Gagal load data referensi zona: {e}")
    st.stop()

if uploaded_file:
    try:
        if uploaded_file.name.endswith(".xls"):
            df_raw = pd.read_excel(uploaded_file, sheet_name=0, engine="xlrd")
        else:
            df_raw = pd.read_excel(uploaded_file, sheet_name=0)
    except Exception as e:
        st.error(f"Gagal baca sheet dari file user: {e}")
        st.stop()

    df = df_raw.copy()

    df.columns = df.columns.str.strip()

    column_mapping = {
        'Confirm Date': 'Confirm date',
        'Confirm Time': 'Confirm time',
        'Qty': 'Qty',
        'Flag': 'Flag',
        'Wavepick Created': 'Wavepick created',
        'Wavepick No': 'Wavepick',
        'Stype': 'STYPE',
        'Material ID': 'MID'
    }
    df = df.rename(columns=column_mapping)

    required_columns = list(column_mapping.values())
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        st.error(f"File yang diupload tidak mengandung kolom berikut: {', '.join(missing_columns)}")
        st.stop()

    df['Confirm date'] = pd.to_datetime(df['Confirm date'], errors='coerce')
    df['Confirm time'] = pd.to_datetime(df['Confirm time'], errors='coerce')
    df['Wavepick created'] = pd.to_datetime(df['Wavepick created'], errors='coerce')

    df_late = df[(df['Qty'] > 0) & (df['Flag'] == 'A') & (df['Confirm time'].dt.time.astype(str) == '00:00:00')]

    stype_to_zona = df_zona.groupby('STYPE')['ZONA'].first().to_dict()
    df_late['ZONA'] = df_late['STYPE'].map(stype_to_zona)

    df_late = df_late.merge(df_zona_ps1, on='MID', how='left', suffixes=('', '_ps1'))
    df_late['ZONA'] = df_late['ZONA_ps1'].combine_first(df_late['ZONA'])
    df_late = df_late.drop(columns=['ZONA_ps1'])

    zona_map = {
        'ZAA': 'A',
        'ZAB': 'BK',
        'ZAC': 'CJ',
        'ZAL': 'L'
    }
    df_late['ZONA'] = df_late['ZONA'].replace(zona_map)

    df_late = df_late.drop_duplicates(subset=['Wavepick', 'ZONA'])
    df_late['ZONA'] = df_late['ZONA'].fillna('Unmapped')

    zona_summary = df_late[~df_late['ZONA'].isin(['Unmapped', 'Unnamed'])].groupby('ZONA')['Wavepick'].nunique().reset_index()
    zona_summary.columns = ['ZONA', 'Jumlah Wavepick Late']
    zona_summary = zona_summary.sort_values(by='Jumlah Wavepick Late', ascending=False)

    st.subheader("\U0001F4CA Ringkasan Wavepick Late per ZONA")
    st.dataframe(zona_summary, use_container_width=True)
    st.bar_chart(zona_summary.set_index('ZONA'))

    df_late['late_diff'] = (df_late['Confirm date'] - df_late['Wavepick created'])
    df_late['late_diff_hour'] = df_late['late_diff'].dt.total_seconds() / 3600
    df_warn = df_late[df_late['late_diff_hour'] > 6]

    if not df_warn.empty:
        st.warning(f"\U0001F6A8 Ada {len(df_warn)} wavepick yang telat lebih dari 6 jam!")
        with st.expander("Lihat detail wavepick telat >6 jam"):
            st.dataframe(df_warn[['Wavepick', 'ZONA', 'STYPE', 'MID', 'late_diff_hour']], use_container_width=True)

    df_pick = df[(df['Qty'] > 0) & (df['Flag'] == 'C') & (df['Confirm time'].dt.time.astype(str) != '00:00:00')].copy()
    df_pick['ZONA'] = df_pick['STYPE'].map(stype_to_zona)
    df_pick = df_pick.merge(df_zona_ps1, on='MID', how='left', suffixes=('', '_ps1'))
    df_pick['ZONA'] = df_pick['ZONA_ps1'].combine_first(df_pick['ZONA'])
    df_pick = df_pick.drop(columns=['ZONA_ps1'])
    df_pick['ZONA'] = df_pick['ZONA'].replace(zona_map)

    df_pick['Confirm time'] = pd.to_datetime(df_pick['Confirm time'], errors='coerce')
    pick_duration = df_pick.groupby(['ZONA', 'Wavepick']).agg(
        start_time=('Confirm time', 'min'),
        end_time=('Confirm time', 'max'),
        total_mid=('MID', 'nunique'),
        total_qty=('Qty', 'sum')
    ).reset_index()
    pick_duration['duration'] = pick_duration['end_time'] - pick_duration['start_time']
    pick_duration['duration'] = pick_duration['duration'].apply(lambda x: str(x).split('.')[0])

    st.subheader("‚è±Ô∏è Durasi Picking per Wavepick dan Zona")
    st.dataframe(pick_duration, use_container_width=True)

    # Rata-rata durasi per zona
    zona_avg_duration = pick_duration.groupby('ZONA')['duration'].apply(
        lambda x: pd.to_timedelta(x).mean()
    ).reset_index()
    zona_avg_duration['duration'] = zona_avg_duration['duration'].apply(lambda x: str(x).split('.')[0])
    zona_avg_duration.columns = ['ZONA', 'Rata-rata Durasi Picking']

    st.subheader("üìä Rata-rata Durasi Picking per Zona")
    st.dataframe(zona_avg_duration, use_container_width=True)

    # Rata-rata durasi per wavepick
    wavepick_avg_duration = pick_duration.groupby('Wavepick')['duration'].apply(
        lambda x: pd.to_timedelta(x).mean()
    ).reset_index()
    wavepick_avg_duration['duration'] = wavepick_avg_duration['duration'].apply(lambda x: str(x).split('.')[0])
    wavepick_avg_duration.columns = ['Wavepick', 'Rata-rata Durasi Picking']

    st.subheader("üìä Rata-rata Durasi Picking per Wavepick")
    st.dataframe(wavepick_avg_duration, use_container_width=True)

    st.subheader("‚è±Ô∏è Durasi Picking Berdasarkan Status Wavepick")
    df['Confirm time'] = pd.to_datetime(df['Confirm time'], errors='coerce')
    now = pd.Timestamp.now()

    df_valid_time = df[df['Confirm time'].dt.time.astype(str) != '00:00:00']
    wavepick_status = df.groupby('Wavepick')['Flag'].apply(lambda x: (x == 'C').all()).reset_index(name='is_complete')
    wavepick_time = df_valid_time.groupby('Wavepick')['Confirm time'].agg(['min', 'max']).reset_index()
    wavepick_status = wavepick_status.merge(wavepick_time, on='Wavepick', how='left')
    wavepick_status['end_time'] = wavepick_status.apply(lambda row: row['max'] if row['is_complete'] else now, axis=1)
    wavepick_status['duration'] = wavepick_status['end_time'] - wavepick_status['min']
    wavepick_status['duration'] = wavepick_status['duration'].apply(lambda x: str(x).split('.')[0])

    st.dataframe(wavepick_status.rename(columns={
        'min': '1st Confirm Time',
        'max': 'Last Confirm Time'
    })[['Wavepick', 'is_complete', '1st Confirm Time', 'Last Confirm Time', 'end_time', 'duration']], use_container_width=True)

else:
    st.info("Silakan upload file Excel untuk mulai.")